# -*- coding: utf-8 -*-
"""
Created on Sun Mar 15 21:06:40 2020

@author: trann5
"""
import numpy as np
import copy

# W=np.array([[ 0.  ,  0.3 ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
#          0.  ,  0.  ,  0.  ,  0.  ],
#        [-0.01,  0.  ,  0.3,  0.3,  0.3,  0.  ,  0.  ,  0.  ,  0.  ,
#          0.  ,  0.  ,  0.  ,  0.  ],
#        [ 0.  , -0.01,  0.  ,  0.3,  0.3,  0.3,  0.  ,  0.  ,  0.  ,
#          0.  ,  0.  ,  0.  ,  0.  ],
#        [ 0.  , -0.01,  0.1 ,  0.  ,  0.  ,  0.  ,  0.3,  0.  ,  0.  ,
#          0.  ,  0.  ,  0.  ,  0.  ],
#        [ 0.  , -0.01,  0.1 ,  0.  ,  0.  ,  0.  ,  0.  ,  0.3,  0.  ,
#          0.  ,  0.  ,  0.  ,  0.  ],
#        [ 0.  ,  0.  , -0.01,  0.  ,  0.  ,  0.  ,  0.3,  0.3,  0.3,
#          0.  ,  0.  ,  0.  ,  0.  ],
#        [ 0.  ,  0.  ,  0.  , -0.01,  0.  ,  0.1 ,  0.  ,  0.  ,  0.  ,
#          0.3,  0.  ,  0.  ,  0.  ],
#        [ 0.  ,  0.  ,  0.  ,  0.  , -0.01,  0.1 ,  0.  ,  0.  ,  0.  ,
#          0.  ,  0.3,  0.  ,  0.  ],
#        [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  , -0.01,  0.  ,  0.  ,  0.  ,
#          0.3 ,  0.3 ,  0.3 ,  0.  ],
#        [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  , -0.01,  0.  ,  0.1 ,
#          0.  ,  0.3,  0.  ,  0.  ],
#        [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  , -0.01,  0.1 ,
#          0.  ,  0.  ,  0.3,  0.  ],
#        [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  , -0.01,
#         -0.01, -0.01,  0.  ,  0.3],
#        [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
#          0.  ,  0.  , -0.01,  0.  ]])

W=np.array([[ 0.  ,  0.5 ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
          0.  ,  0.  ,  0.  ,  0.  ],
        [-0.01,  0.  ,  0.32,  0.32,  0.32,  0.  ,  0.  ,  0.  ,  0.  ,
          0.  ,  0.  ,  0.  ,  0.  ],
        [ 0.  , -0.01,  0.  ,  0.29,  0.29,  0.29,  0.  ,  0.  ,  0.  ,
          0.  ,  0.  ,  0.  ,  0.  ],
        [ 0.  , -0.01,  0.1 ,  0.  ,  0.  ,  0.  ,  0.39,  0.  ,  0.  ,
          0.  ,  0.  ,  0.  ,  0.  ],
        [ 0.  , -0.01,  0.1 ,  0.  ,  0.  ,  0.  ,  0.  ,  0.38,  0.  ,
          0.  ,  0.  ,  0.  ,  0.  ],
        [ 0.  ,  0.  , -0.01,  0.  ,  0.  ,  0.  ,  0.29,  0.29,  0.29,
          0.  ,  0.  ,  0.  ,  0.  ],
        [ 0.  ,  0.  ,  0.  , -0.01,  0.  ,  0.1 ,  0.  ,  0.  ,  0.  ,
          0.36,  0.  ,  0.  ,  0.  ],
        [ 0.  ,  0.  ,  0.  ,  0.  , -0.01,  0.1 ,  0.  ,  0.  ,  0.  ,
          0.  ,  0.36,  0.  ,  0.  ],
        [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  , -0.01,  0.  ,  0.  ,  0.  ,
          0.3 ,  0.3 ,  0.3 ,  0.  ],
        [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  , -0.01,  0.  ,  0.1 ,
          0.  ,  0.34,  0.  ,  0.  ],
        [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  , -0.01,  0.1 ,
          0.  ,  0.  ,  0.36,  0.  ],
        [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  , -0.01,
        -0.01, -0.01,  0.  ,  0.38],
        [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
          0.  ,  0.  , -0.01,  0.  ]])
# B=[0.2903901, 0.1956955, 0.2410408, 0.1953952, 0.1980979, 0.2009007,
#        0.1523522, 0.1543542, 0.1562561, 0.1048047, 0.1060059, 0.9678669,
#        0.8625617]

B=[0.445, 0.168, 0.132, 0.301, 0.303, 0.123, 0.285, 0.284, 0.12 ,0.247, 0.26 , 0.303, 0.299]
# B=[0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.3]
def distance(v, u):
   return sum((v_i - u_i)**2 for v_i, u_i in zip(v, u))**0.5


def Check(A):

    B=copy.copy(A)
    C=HNN(A)
    # print ('d',distance(C,B))
    for i in range( len(B)):
        if B[i]==0:
            return i,0
            break

    if distance(C,B)>0.0001:
        # print ("Changed")
        return -1,C
    elif distance(C,B)>0.01:
        return 0,0 #damage
    else:
        # print ("Normal")
        return -2,C

def testing(A,W,B,T):
    for _ in range(100):
        for i in range(len(A)):#
            a= np.dot(W[i], A) + B[i]
            A[i] = 1.0 if a >= 1.0 else 0.0 if a <0.0 else round(a,2)

    if distance(A,T)==0:
        return A,"OK"
    else:
        return A,distance(A,T)
import itertools
import random
def perturbation(per):
    total=156
    no=int(round((per*total)/100,0))
    rdlist=random.sample(range(total),no)

    numbers = [0,1,2,3,4,5,6,7,8,9,10,11,12]
    results = list(itertools.permutations(numbers, 2))

    print (rdlist, len(rdlist))

    for l in rdlist:
        W[results[l]] += W[results[l]]*np.random.choice([-1,1])*np.random.randint(76, 100)/100
        # np.random.choice([-1,1])*int(np.random.choice(5, 1))/100

    return W


def HNN(A):

    for _ in range(100):
        for i in range(len(A)):
            p=copy.copy(A)
            a= np.dot(W[i], A) + B[i]
            A[i] = 1.0 if a >= 1.0 else 0.0 if a <=0.0 else round(a,2)
        
    return A

T =[0.8, 0.7, 0.6, 0.55, 0.55, 0.55, 0.5, 0.5, 0.5, 0.45, 0.45, 0.4, 0.3]
X=[0.1, 0.7, 0.6, 0.55, 0.55, 0.55, 0.5, 0.5, 0.5, 0.45,0, 0.4, 0.3]
X2 =[0.8, 0.7, 0.6, 0.6, 0.6, 0.55, 0.55, 0.55, 0.5, 0.5, 0.5, 0.4, 0.3]






